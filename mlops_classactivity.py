# -*- coding: utf-8 -*-
"""MLOPS_ClassActivity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11RYrekDg6wQbYZ3pFbcMMiidVOUWKdZn

## Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns

from sklearn.preprocessing import LabelEncoder

pip install mlflow

import mlflow

"""## Data Import & Preprocessing"""

#Data publicly available at: https://www.kaggle.com/datasets/zusmani/pakistans-largest-ecommerce-dataset
df = pd.read_csv('data.csv')
df = df.iloc[0:584524,0:21]
df

percent_missing = df.isnull().sum() * 100 / len(df)
missing_value_df = pd.DataFrame({'percent_missing': percent_missing})
missing_value_df

df = df.dropna(subset=['status', 'category_name_1', 'Customer Since', 'Customer ID'])
df

df['Month'] = df['Month'].astype(int)

df.loc[df['Month'] == 9, 'Month Name'] = 'September' 
df.loc[df['Month'] == 8, 'Month Name'] = 'August' 
df.loc[df['Month'] == 7, 'Month Name'] = 'July' 
df.loc[df['Month'] == 6, 'Month Name'] = 'June' 
df.loc[df['Month'] == 5, 'Month Name'] = 'May' 
df.loc[df['Month'] == 4, 'Month Name'] = 'April' 
df.loc[df['Month'] == 3, 'Month Name'] = 'March' 
df.loc[df['Month'] == 2, 'Month Name'] = 'February' 
df.loc[df['Month'] == 1, 'Month Name'] = 'January' 
df.loc[df['Month'] == 12, 'Month Name'] = 'December' 
df.loc[df['Month'] == 11, 'Month Name'] = 'November' 
df.loc[df['Month'] == 10, 'Month Name'] = 'October'

df.loc[df['price'] <= 500 , 'Price Range'] = '< 500' 
df.loc[(df['price'] <= 1000) &  (df['price'] > 500), 'Price Range'] = '500 - 1000' 
df.loc[(df['price'] <= 1500) &  (df['price'] > 1000), 'Price Range'] = '1000 - 1500' 
df.loc[(df['price'] <= 2000) &  (df['price'] > 1500), 'Price Range'] = '1500 - 2000' 
df.loc[(df['price'] <= 3000) &  (df['price'] > 2000), 'Price Range'] = '2000 - 3000' 
df.loc[(df['price'] <= 4000) &  (df['price'] > 3000), 'Price Range'] = '3000 - 4000' 
df.loc[(df['price'] <= 5000) &  (df['price'] > 4000), 'Price Range'] = '4000 - 5000' 
df.loc[(df['price'] > 5000), 'Price Range'] = '5000 <'

df.loc[df['discount_amount'] <= 500 , 'discount_amount Range'] = '< 500' 
df.loc[(df['discount_amount'] <= 1000) &  (df['discount_amount'] > 500), 'discount_amount Range'] = '500 - 1000' 
df.loc[(df['discount_amount'] <= 1500) &  (df['discount_amount'] > 1000), 'discount_amount Range'] = '1000 - 1500' 
df.loc[(df['discount_amount'] <= 2000) &  (df['discount_amount'] > 1500), 'discount_amount Range'] = '1500 - 2000' 
df.loc[(df['discount_amount'] <= 3000) &  (df['discount_amount'] > 2000), 'discount_amount Range'] = '2000 - 3000' 
df.loc[(df['discount_amount'] > 3000), 'discount_amount Range'] = '3000 <'

df = df.drop(['sku', 'sales_commission_code'], axis=1)
percent_missing = df.isnull().sum() * 100 / len(df)
missing_value_df = pd.DataFrame({'percent_missing': percent_missing})
missing_value_df

df

df.columns

ml = df[["status", "category_name_1", "payment_method", "qty_ordered", "BI Status", "Year", "Month Name", "Price Range", "discount_amount Range", "Customer ID"]]
ml

columns_to_encode = ["status", "category_name_1", "payment_method", "BI Status", "Year", "Month Name", "Price Range", "discount_amount Range"]

le = LabelEncoder()

for col in columns_to_encode:
    ml[col] = le.fit_transform(ml[col])

ml

temp = ml.drop(["status"], axis=1)
temp

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X = temp
y = ml["status"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

desc = "Decision Tree Classifier for Fake Order Prediction"

mlflow.set_experiment("Order Status Prediction")

with mlflow.start_run(run_name="dtcos", description=desc):
    dtc = DecisionTreeClassifier(random_state=42)
    dtc.fit(X_train, y_train)

    mlflow.log_params(dtc.get_params())
    mlflow.log_metric('train_accuracy', dtc.score(X_train, y_train))

    y_pred = dtc.predict(X_test)
    test_accuracy = accuracy_score(y_test, y_pred)

    mlflow.log_metric('test_accuracy', test_accuracy)

    mlflow.sklearn.log_model(dtc, 'model')

!mlflow ui

